fa = (f-t(f))/2
contour(x,y,fa,nlevels=15)
x = 1:10
y = x
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa = (f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
x = 1:10
y = x
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa = (f-t(f))/2
contour(x,y,fa,nlevels=15)
persp(x,y,fa)
x = 1:10
y = x
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa = (f-t(f))/2
contour(x,y,fa,nlevels=15)
persp(x,y,fa, theta = 100, phi = 40)
getwd()
setwd("CS112/dataset/")
rm(list=ls())
setwd("CS112/dataset/")
setwd("CS112/dataset/")
read.csv("College.csv")
College = read.csv("College.csv")
College = read.csv("College.csv")
fix(College)
College = read.csv("College.csv")
fix("College.csv"")
College = read.csv("College.csv")
fix("College.csv")
College = read.csv("College.csv")
fix(College)
College = read.csv("College.csv")
fix(College)
College = read.csv("College.csv")
rownames(college) = college[,1]
college = read.csv("College.csv")
rownames(college) = college[,1]
college = read.csv("College.csv")
rownames(college) = college[,1]
rownames(college)
college = read.csv("College.csv")
rownames(college) = college[,1]
fix(college)
college = read.csv("College.csv")
rownames(college) = college[,1]
college=college[,-1]
college = read.csv("College.csv")
rownames(college) = college[,1]
college=college[,-1]
fix(college)
college = read.csv("College.csv")
rownames(college) = college[,1]
college=college[,-1]
college
college = read.csv("College.csv")
rownames(college) = college[,1]
college=college[,-1]
summary(college)
college = read.csv("College.csv")
rownames(college) = college[,1]
college=college[,-1]
summary(college)
pairs(college[,1:10])
plot(Outstate, Private, data=college)
college = read.csv("College.csv")
rownames(college) = college[,1]
college=college[,-1]
summary(college)
plot(college$Outstate, college$Private, data=college)
plot(college$Outstate, college$Private)
plot(college$Outstate, college$Private)
?boxplot
boxplot(college$Outstate, college$Private)
?boxplot
boxplot(college$Outstate, college$Private)
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college,Elite)
summary(college)
boxplot(college$Outstate, college$Elite)
boxplot(college$Outstate, college$Elite)
Auto = read.table("Auto.data")
summary(Auto)
fix(Auto)
summary(Auto)
summary(Auto)
sapply(Auto, class)
Auto = Auto.csv("Auto.csv")
Auto = Auto
head(Auto
Auto = Auto
head(Auto)
read.table("Auto.data", header = True)
read.table("Auto.data", header = )
?read.table
read.table("Auto.data", header = T)
auto = read.table("Auto.data", header = T)
auto = read.table("Auto.data", header = T)
auto
auto = read.table("Auto.data", header = T)
summary(auto)
auto = read.table("Auto.data", header = T)
sapply(auto, class)
auto = read.table("Auto.data", header = T)
sapply(auto, class)
sapply(auto, rang)
auto = read.table("Auto.data", header = T)
sapply(auto, class)
sapply(auto, range)
auto = read.table("Auto.data", header = T)
sapply(auto, class)
auto = read.table("Auto.data", header = T)
sapply(auto, class)
auto[-c(10:85),]
auto = read.table("Auto.data", header = T)
sapply(auto, class)
summary(auto[-c(10:85),])
auto = read.table("Auto.data", header = T)
sapply(auto, class)
str(auto)
auto = read.table("Auto.data", header = T)
sapply(auto, class)
str(auto)
summary(auto[, -c(4,9)])
auto = read.table("Auto.data", header = T)
sapply(auto, class)
str(auto)
sapply(auto[, -c(4,9)], mean)
sapply(auto[, -c(4,9)], sd)
auto = read.table("Auto.data", header = T)
sapply(auto, class)
str(auto)
sapply(auto[, -c(4,9)], sd)
rm(list = ls())
library(MASS)
Boston
?
Boston
library(MASS)
Boston
plot(Boston)
head(college)
library(ISLR)
library(ISLR)
ISLR::College
library(ISLR)
college = ISLR::College
fix(college)
library(ISLR)
college = ISLR::College
head(college)
library(ISLR)
college = ISLR::College
summary(college)
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
boxplot(Outstate, Private)
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
boxplot(Outstate, Private, main = "Out of State Population for Private vs Public Schools")
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
boxplot(Outstate, Private, main = "Out of State Population for Private vs Public Schools")
?College
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
boxplot(college$Outstate, college$Private, main = "Out of State Population for Private vs Public Schools")
head(college$Private)
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
boxplot(college$Outstate[college$Private == "Yes"], college$Outstate[college$Private == "No"], main = "Out of State Population for Private vs Public Schools")
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
boxplot(college$Private, college$Outstate, main = "Out of State Population for Private vs Public Schools")
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
plot(college$Private, college$Outstate, main = "Out of State Population for Private vs Public Schools")
library(ISLR)
college = ISLR::College
pairs(college[,1:10])
attach(college)
plot(college$Private, college$Outstate, main = "Out of State Population for Private vs Public Schools", xlab = "Private", ylab = "Out of State Tuition")
?rep
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
?hist
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
par(mfrow = c(2,2))
hist(college$Accept)
hist(college$Enroll)
hist(college$F.Undergrad)
hist(college$Outstate)
?par
?mfrow
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
par(mfrow = c(2,2))
hist(college$Accept)
hist(college$Enroll)
hist(college$F.Undergrad)
hist(college$Outstate)
par(mfrow = c(1,1))
Auto = ISLR::Auto
str(Auto)
auto = read.table("Auto.data")
auto = read.table("Auto.data")
auto
auto = read.table("Auto.data", header = T)
auto
auto = read.table("Auto.data", header = T)
str(auto)
auto = read.table("Auto.data", header = T)
horsepower = as.integer(horsepower)
auto = read.table("Auto.data", header = T)
attach(auto)
horsepower = as.integer(horsepower)
str(auto)
horsepower = as.integer(horsepower)
str(auto)
auto$horsepower = as.integer(auto$horsepower)
auto
auto$horsepower = as.integer(auto$horsepower)
str(auto)
auto$horsepower = as.integer(auto$horsepower)
range(auto[,-c(4,9)])
auto$horsepower = as.integer(auto$horsepower)
summary(auto[,-c(4,9)])
auto$horsepower = as.integer(auto$horsepower)
mean(auto[,-c(4,9)])
auto$horsepower = as.integer(auto$horsepower)
sapply(auto[,-c(4,9)], range)
auto$horsepower = as.integer(auto$horsepower)
sapply(auto[,-c(4,9)], mean)
auto$horsepower = as.integer(auto$horsepower)
sapply(auto[,-c(4,9)], sd)
plot(auto)
library(MASS)
Boston
library(MASS)
data(Boston)
library(MASS)
data(Boston)
attach(Boston)
lm(crim ~ ., data = Boston)
lm(crim ~ rn + indus + chas, data = Boston)
summary(lm(crim ~ ., data = Boston))
summary(lm(crim ~ ., data = Boston))
lm(crim ~ zn + nox + dis + rad + black + lstat + medv, data = Boston)
summary(lm(crim ~ zn + nox + dis + rad + black + lstat + medv, data = Boston))
summary(lm(crim ~ zn + nox + dis + rad + black + lstat + medv, data = Boston))
plot(Boston[, c("crim", "zn", "nox", "dis", "rad", "black", "lstat", "medv")])
hist(Boston$crim, breaks = 50)
hist(Boston$crim, breaks = 50)
which.max(Boston$crim)
hist(Boston$crim, breaks = 50)
Bonston[which.max(Boston$crim),]
hist(Boston$crim, breaks = 50)
Boston[which.max(Boston$crim),]
?Boston
hist(Boston$tax)
hist(Boston$tax)
Boston[which.max(Boston$tax),]
hist(Boston$ptratio)
hist(Boston$ptratio)
Boston[which.max(Boston$ptratio), ]
summary(Boston$chas)
sum(Boston$chas)
med(Boston$ptratio)
median(Boston$ptratio)
Boston$age
Boston$medv
which.min(Boston$medv)
Boston[which.min(Boston$medv), ]
Boston$rm > 8
Boston[Boston$rm > 8,]
nrow(Boston[Boston$rm > 8,])
nrow(Boston[Boston$rm > 7,])
nrow(Boston[Boston$rm > 8,])
lm.fit = lm(medv ~ lstat)
lm.fit = lm(medv ~ lstat)
lm.fit
lm.fit = lm(medv ~ lstat)
summary(lm.fit)
lm.fit = lm(medv ~ lstat)
summary(lm.fit)
names(lm.foit)
lm.fit = lm(medv ~ lstat)
summary(lm.fit)
names(lm.fit)
lm.fit = lm(medv ~ lstat)
summary(lm.fit)
names(lm.fit)
confint(lm.fit)
set.seed(1)
x = rnorm(0,1,100)
x
set.seed(1)
x = rnorm(0,1,100)
?rnorm
set.seed(1)
x = rnorm(100)
set.seed(1)
x = rnorm(100)
x
set.seed(1)
x = rnorm(100)
x
set.seed(1)
x = rnorm(100)
eps = rnorm(100, 0, 0.25)
set.seed(1)
x = rnorm(100)
eps = rnorm(100, 0, 0.25)
y = -1 + 0.5*x + eps
set.seed(1)
x = rnorm(100)
eps = rnorm(100, 0, 0.25)
y = -1 + 0.5*x + eps
length(y)
summary(lm(y ~ x))
plot(x,y)
fig1 = plot(x,y)
abline(fig1, lwd = 3)
fig1 = plot(x,y)
abline(fig1)
coef(lm.fit)
lm.fit2 = lm(y ~poly(x,2))
summary(lm.fit2)
set.seed(1)
x = rnorm(100)
eps = rnorm(100, 0, 0.1)
y = -1 + 0.5*x + eps
nrow(y)
plot(x,y)
plot(x,y)
lm.fit3 = lm(y~x)
summary(lm.fit3)
coef(lm.fit3)
lm.fit4 = lm(y ~ poly(x,2))
summary(lm.fit4)
ys = predict(lm.fit2, data.frame(x = seq(0, 3, 0.1)))
plot(x,y) + abline(coef = coef(lm.fit3), col = "red") + abline(coef = coef(lm.fit4), col = "blue")
set.seed(1)
x1 = runif(100)
x2 = 0.5*x1+rnorm(100)/10
y = 2 + 2*x1 + 0.3*x2 + rnorm(100)
cor(x,y)
plot(x, y)
plot(x1, x2)
set.seed(1)
x1 = runif(100)
x2 = 0.5 * x1 + rnorm(100)/10
y = 2 + 2*x1 + 0.3*x2 + rnorm(100)
cor(x1,x2)
plot(x1, x2)
lm(y ~ x1 + x2)
summary(lm(y ~ x1 + x2)l)
summary(lm(y ~ x1 + x2))
summary(lm(y ~ x1))
summary(lm(y ~ x2))
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
summary(lm(y~x1+x2))
summary(lm(y~x1))
summary(lm(y~x2))
lm(crim ~ ., data = Boston)
summary(lm(crim ~ ., data = Boston))
library(ISLR)
names(Smarket)
library(ISLR)
names(Smarket)
dim(Smarket)
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
cor(Smarket)
pairs(Smarket)
cor(Smarket)
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
glm.fit = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, family = binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef(
summary(glm.fit)$coef
summary(glm.fit)$coef[,4]
glm.probs = predict(glm.fit, type = "response")
glm.probs[1:10]
glm.probs = predict(glm.fit, type = "response")
glm.probs[1:10]
contrasts(Direction)
glm.pred = rep("Down", 1250)
glm.pred[glm.probs > 0.5] = "Up"
table(glm.pred, Direction)
mean(glm.pred == Direction)
train = (Year < 2005)
train = (Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
glm.fit = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, family = binomial, subset = train)
glm.probs = predict(glm.fit, Smarket.2005, type = "response")
train = (Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
train = (Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
Direction.2005 = Direction[!train]
lda.fit = lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
lda.fit
lda.fit = lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
lda.fit
plot(lda.fit)
lda.pred = predict(lda.fit, Smarket.2005)
lda.pred = predict(lda.fit, Smarket.2005)
names(lad.pred)
lda.pred = predict(lda.fit, Smarket.2005)
names(lda.pred)
lda.class = lda.pred$class
table(lda.class, Direction.2005)
lda.class = lda.pred$class
table(lda.class, Direction.2005)
mean(lda.class == Direction.2005)
ISLR::Caravan
dim(Caravan)
ISLR::Caravan
dim(Caravan)
attach(Caravan)
summary(Purchase)
standardized.X = scale(Caravan[,-86])
var(Caravan[,1])
standardized.X = scale(Caravan[,-86])
var(Caravan[,2])
standardized.X = scale(Caravan[,-86])
var(standardized.X[,2])
standardized.X = scale(Caravan[,-86])
var(standardized.X[,1])
test = 1:1000
train.X = standardized.X[-test,]
test.X = standardized.X[test,]
train.Y = Purchase[-test]
test.Y = Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k = 1)
install.packages("knn")
test.X = standardized.X[test,]
train.Y = Purchase[-test]
test.Y = Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k = 1)
library(knn)
library(class)
test.X = standardized.X[test,]
train.Y = Purchase[-test]
test.Y = Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k = 1)
mean(test.Y!= knn.pred)
mean(test.Y!="No")
knn.pred = knn(train.X, test.X, train.Y, k=3)
table(knn.pred,test.Y)
knn.pred = knn(train.X, test.X, train.Y, k=4)
table(knn.pred,test.Y)
knn.pred = knn(train.X, test.X, train.Y, k=5)
table(knn.pred,test.Y)
??interquartile
??quartile
??interquartile
??quartile
?quartile
?quantile
??interquartile
par(mfrow)
?predict
